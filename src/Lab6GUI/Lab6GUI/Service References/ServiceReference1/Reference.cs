//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab6GUI.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Calculate", ReplyAction="http://tempuri.org/IService1/CalculateResponse")]
        string Calculate(string number, string first, string action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Calculate", ReplyAction="http://tempuri.org/IService1/CalculateResponse")]
        System.Threading.Tasks.Task<string> CalculateAsync(string number, string first, string action);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sin", ReplyAction="http://tempuri.org/IService1/SinResponse")]
        string Sin(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Sin", ReplyAction="http://tempuri.org/IService1/SinResponse")]
        System.Threading.Tasks.Task<string> SinAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Cos", ReplyAction="http://tempuri.org/IService1/CosResponse")]
        string Cos(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Cos", ReplyAction="http://tempuri.org/IService1/CosResponse")]
        System.Threading.Tasks.Task<string> CosAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Exp", ReplyAction="http://tempuri.org/IService1/ExpResponse")]
        string Exp(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Exp", ReplyAction="http://tempuri.org/IService1/ExpResponse")]
        System.Threading.Tasks.Task<string> ExpAsync(string number);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Lab6GUI.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Lab6GUI.ServiceReference1.IService1>, Lab6GUI.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Calculate(string number, string first, string action) {
            return base.Channel.Calculate(number, first, action);
        }
        
        public System.Threading.Tasks.Task<string> CalculateAsync(string number, string first, string action) {
            return base.Channel.CalculateAsync(number, first, action);
        }
        
        public string Sin(string number) {
            return base.Channel.Sin(number);
        }
        
        public System.Threading.Tasks.Task<string> SinAsync(string number) {
            return base.Channel.SinAsync(number);
        }
        
        public string Cos(string number) {
            return base.Channel.Cos(number);
        }
        
        public System.Threading.Tasks.Task<string> CosAsync(string number) {
            return base.Channel.CosAsync(number);
        }
        
        public string Exp(string number) {
            return base.Channel.Exp(number);
        }
        
        public System.Threading.Tasks.Task<string> ExpAsync(string number) {
            return base.Channel.ExpAsync(number);
        }
    }
}
